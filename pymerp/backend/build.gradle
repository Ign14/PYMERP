import org.gradle.api.plugins.quality.Checkstyle

plugins {
  id "java"
  id "org.springframework.boot" version "3.3.3"
  id "io.spring.dependency-management" version "1.1.6"
  id "checkstyle"
  id "com.diffplug.spotless" version "6.25.0"
}

group = "com.datakomerz"
version = "0.0.1-SNAPSHOT"

java {
  toolchain { languageVersion = JavaLanguageVersion.of(21) }
}

repositories { mavenCentral() }

dependencies {
  implementation "org.springframework.boot:spring-boot-starter-web"
  implementation "org.springframework.boot:spring-boot-starter-security"
  // OAuth2 / OIDC support
  implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server"
  implementation "org.springframework.boot:spring-boot-starter-oauth2-client"
  implementation "org.springframework.boot:spring-boot-starter-validation"
  implementation "org.springframework.boot:spring-boot-starter-data-jpa"
  implementation "org.springframework.boot:spring-boot-starter-actuator"
  implementation "org.springframework.boot:spring-boot-starter-data-redis"
  implementation 'org.springframework.boot:spring-boot-starter-jdbc'

  implementation 'org.flywaydb:flyway-core'
  implementation 'org.flywaydb:flyway-database-postgresql'
  runtimeOnly 'org.postgresql:postgresql'
  
  // OpenAPI (Swagger UI)
  implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0"
  implementation "io.opentelemetry:opentelemetry-api:1.44.1"

  // S3 (MinIO compatible)
  implementation "software.amazon.awssdk:s3:2.25.39"

  // JWT
  implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
  runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
  runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

  annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
  testImplementation "org.springframework.boot:spring-boot-starter-test"
  testImplementation "org.springframework.security:spring-security-test"
  testImplementation "com.h2database:h2"
}

tasks.named("test") { useJUnitPlatform() }

checkstyle {
  toolVersion = "10.17.0"
  configDirectory = file("config/checkstyle")
}

tasks.withType(Checkstyle).configureEach {
  reports { report ->
    report.xml.required.set(false)
    report.html.required.set(true)
  }
}

def boundedContextTargets = [
  "src/main/java/com/datakomerz/pymes/auth/api/**/*.java",
  "src/main/java/com/datakomerz/pymes/auth/application/**/*.java",
  "src/main/java/com/datakomerz/pymes/customers/api/**/*.java",
  "src/main/java/com/datakomerz/pymes/customers/application/**/*.java",
  "src/main/java/com/datakomerz/pymes/sales/api/**/*.java",
  "src/main/java/com/datakomerz/pymes/sales/application/**/*.java",
  "src/main/java/com/datakomerz/pymes/common/api/**/*.java",
  "src/main/java/com/datakomerz/pymes/core/tenancy/CompanyContextFilter.java"
]

spotless {
  java {
    target(boundedContextTargets)
    removeUnusedImports()
    trimTrailingWhitespace()
    endWithNewline()
  }
}

tasks.named("checkstyleMain").configure {
  include(boundedContextTargets.collect { it.replace("src/main/java/", "") })
}

tasks.named("checkstyleTest").configure {
  include(boundedContextTargets.collect { it.replace("src/main/java/", "") })
}

tasks.named("check") { dependsOn("spotlessCheck") }
